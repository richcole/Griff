type token =
  | VAR of (string)
  | CONST of (string)
  | PERIOD
  | COMMA
  | EOF
  | DASH
  | SEMI

open Parsing;;
# 21 "graph_lang_parse.mly"
  open Graph_lang_ast ;;
# 14 "graph_lang_parse.ml"
let yytransl_const = [|
  259 (* PERIOD *);
  260 (* COMMA *);
    0 (* EOF *);
  261 (* DASH *);
  262 (* SEMI *);
    0|]

let yytransl_block = [|
  257 (* VAR *);
  258 (* CONST *);
    0|]

let yylhs = "\255\255\
\001\000\006\000\006\000\003\000\002\000\002\000\005\000\005\000\
\005\000\004\000\004\000\007\000\007\000\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\002\000\003\000\005\000\001\000\003\000\
\004\000\001\000\003\000\001\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\012\000\000\000\014\000\007\000\002\000\000\000\
\000\000\000\000\000\000\000\000\004\000\000\000\013\000\000\000\
\000\000\001\000\003\000\000\000\000\000\000\000\000\000\008\000\
\005\000\000\000\009\000\006\000"

let yydgoto = "\002\000\
\005\000\006\000\007\000\008\000\009\000\010\000\011\000"

let yysindex = "\005\000\
\014\255\000\000\000\000\005\255\000\000\000\000\000\000\015\255\
\003\255\001\000\019\255\019\255\000\000\014\255\000\000\019\255\
\019\255\000\000\000\000\019\255\019\255\003\255\019\255\000\000\
\000\000\019\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\021\255\000\000\000\000\000\000\000\000\
\022\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\024\255\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\014\000\000\000\015\000\000\000\247\255"

let yytablesize = 259
let yytable = "\017\000\
\018\000\020\000\021\000\003\000\015\000\001\000\023\000\024\000\
\016\000\012\000\025\000\026\000\017\000\027\000\003\000\004\000\
\028\000\013\000\014\000\003\000\015\000\013\000\013\000\019\000\
\010\000\010\000\011\000\011\000\022\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\003\000\004\000"

let yycheck = "\009\000\
\000\000\011\000\012\000\001\001\002\001\001\000\016\000\017\000\
\006\001\005\001\020\000\021\000\022\000\023\000\001\001\002\001\
\026\000\003\001\004\001\001\001\002\001\001\001\002\001\010\000\
\003\001\004\001\003\001\004\001\014\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001"

let yynames_const = "\
  PERIOD\000\
  COMMA\000\
  EOF\000\
  DASH\000\
  SEMI\000\
  "

let yynames_block = "\
  VAR\000\
  CONST\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Graph_lang_ast.triple list list) in
    Obj.repr(
# 35 "graph_lang_parse.mly"
                          ( _1 )
# 151 "graph_lang_parse.ml"
               : Graph_lang_ast.triple list list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Graph_lang_ast.triple list) in
    Obj.repr(
# 39 "graph_lang_parse.mly"
                          ( [ _1 ] )
# 158 "graph_lang_parse.ml"
               : Graph_lang_ast.triple list list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Graph_lang_ast.triple list list) in
    let _2 = (peek_val parser_env 0 : Graph_lang_ast.triple list) in
    Obj.repr(
# 40 "graph_lang_parse.mly"
                          ( (List.append _1 ([_2])) )
# 166 "graph_lang_parse.ml"
               : Graph_lang_ast.triple list list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Graph_lang_ast.triple list) in
    Obj.repr(
# 44 "graph_lang_parse.mly"
                                   ( _1 )
# 173 "graph_lang_parse.ml"
               : Graph_lang_ast.triple list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : 'node) in
    let _2 = (peek_val parser_env 1 : 'node) in
    let _3 = (peek_val parser_env 0 : 'node) in
    Obj.repr(
# 48 "graph_lang_parse.mly"
                                 ( (None, _1, _2, _3) )
# 182 "graph_lang_parse.ml"
               : Graph_lang_ast.triple))
; (fun parser_env ->
    let _1 = (peek_val parser_env 4 : string) in
    let _3 = (peek_val parser_env 2 : 'node) in
    let _4 = (peek_val parser_env 1 : 'node) in
    let _5 = (peek_val parser_env 0 : 'node) in
    Obj.repr(
# 49 "graph_lang_parse.mly"
                                 ( (Some (Const _1), _3, _4, _5) )
# 192 "graph_lang_parse.ml"
               : Graph_lang_ast.triple))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Graph_lang_ast.triple) in
    Obj.repr(
# 53 "graph_lang_parse.mly"
                                 ( [_1] )
# 199 "graph_lang_parse.ml"
               : Graph_lang_ast.triple list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Graph_lang_ast.triple list) in
    let _2 = (peek_val parser_env 1 : 'node) in
    let _3 = (peek_val parser_env 0 : 'node) in
    Obj.repr(
# 55 "graph_lang_parse.mly"
      ( 
	(first_context _1, first_object _1, _2, _3) :: _1 
      )
# 210 "graph_lang_parse.ml"
               : Graph_lang_ast.triple list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 3 : Graph_lang_ast.triple list) in
    let _3 = (peek_val parser_env 1 : 'node) in
    let _4 = (peek_val parser_env 0 : 'node) in
    Obj.repr(
# 59 "graph_lang_parse.mly"
      ( 
	(first_context _1, last_subject _1, _3, _4) :: _1 
      )
# 221 "graph_lang_parse.ml"
               : Graph_lang_ast.triple list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Graph_lang_ast.triple list) in
    Obj.repr(
# 65 "graph_lang_parse.mly"
                                 ( _1 )
# 228 "graph_lang_parse.ml"
               : Graph_lang_ast.triple list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 2 : Graph_lang_ast.triple list) in
    let _3 = (peek_val parser_env 0 : Graph_lang_ast.triple list) in
    Obj.repr(
# 67 "graph_lang_parse.mly"
      ( 
	List.append _1 (propogate_context (first_context _1) _3)
      )
# 238 "graph_lang_parse.ml"
               : Graph_lang_ast.triple list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 73 "graph_lang_parse.mly"
                            ( Var _1 )
# 245 "graph_lang_parse.ml"
               : 'node))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 74 "graph_lang_parse.mly"
                            ( Const _1 )
# 252 "graph_lang_parse.ml"
               : 'node))
(* Entry main *)
; (fun parser_env -> raise (YYexit (peek_val parser_env 0)))
|]
let yytables =
  { actions=yyact;
    transl_const=yytransl_const;
    transl_block=yytransl_block;
    lhs=yylhs;
    len=yylen;
    defred=yydefred;
    dgoto=yydgoto;
    sindex=yysindex;
    rindex=yyrindex;
    gindex=yygindex;
    tablesize=yytablesize;
    table=yytable;
    check=yycheck;
    error_function=parse_error;
    names_const=yynames_const;
    names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (yyparse yytables 1 lexfun lexbuf : Graph_lang_ast.triple list list)
