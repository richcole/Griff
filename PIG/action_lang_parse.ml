type token =
  | STRING of (string)
  | IDENT of (string)
  | FOR
  | DO
  | DONE
  | ASSERT
  | RETRACT
  | PRINT
  | PRINTLN
  | EOF

open Parsing;;
# 21 "action_lang_parse.mly"
  open Action_lang_ast ;;
# 17 "action_lang_parse.ml"
let yytransl_const = [|
  259 (* FOR *);
  260 (* DO *);
  261 (* DONE *);
  262 (* ASSERT *);
  263 (* RETRACT *);
  264 (* PRINT *);
  265 (* PRINTLN *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  257 (* STRING *);
  258 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\003\000\003\000\002\000\002\000\002\000\002\000\002\000\
\000\000"

let yylen = "\002\000\
\002\000\001\000\002\000\005\000\002\000\002\000\002\000\002\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\009\000\
\002\000\000\000\000\000\005\000\006\000\007\000\008\000\001\000\
\003\000\000\000\000\000\004\000"

let yydgoto = "\002\000\
\008\000\009\000\010\000"

let yysindex = "\002\000\
\007\255\000\000\010\255\011\255\016\255\017\255\018\255\000\000\
\000\000\001\000\019\255\000\000\000\000\000\000\000\000\000\000\
\000\000\007\255\255\254\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\246\255\003\000"

let yytablesize = 266
let yytable = "\017\000\
\016\000\003\000\001\000\020\000\004\000\005\000\006\000\007\000\
\017\000\003\000\011\000\012\000\004\000\005\000\006\000\007\000\
\013\000\014\000\015\000\000\000\019\000\000\000\018\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\003\000\000\000\000\000\004\000\005\000\
\006\000\007\000"

let yycheck = "\010\000\
\000\000\003\001\001\000\005\001\006\001\007\001\008\001\009\001\
\019\000\003\001\001\001\001\001\006\001\007\001\008\001\009\001\
\001\001\001\001\001\001\255\255\018\000\255\255\004\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\255\255\255\255\006\001\007\001\
\008\001\009\001"

let yynames_const = "\
  FOR\000\
  DO\000\
  DONE\000\
  ASSERT\000\
  RETRACT\000\
  PRINT\000\
  PRINTLN\000\
  EOF\000\
  "

let yynames_block = "\
  STRING\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Action_lang_ast.stmt list) in
    Obj.repr(
# 33 "action_lang_parse.mly"
                         ( _1 )
# 159 "action_lang_parse.ml"
               : Action_lang_ast.stmt list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 0 : Action_lang_ast.stmt) in
    Obj.repr(
# 37 "action_lang_parse.mly"
                         ( [_1] )
# 166 "action_lang_parse.ml"
               : Action_lang_ast.stmt list))
; (fun parser_env ->
    let _1 = (peek_val parser_env 1 : Action_lang_ast.stmt list) in
    let _2 = (peek_val parser_env 0 : Action_lang_ast.stmt) in
    Obj.repr(
# 38 "action_lang_parse.mly"
                         ( List.append _1 [_2] )
# 174 "action_lang_parse.ml"
               : Action_lang_ast.stmt list))
; (fun parser_env ->
    let _2 = (peek_val parser_env 3 : string) in
    let _4 = (peek_val parser_env 1 : Action_lang_ast.stmt list) in
    Obj.repr(
# 42 "action_lang_parse.mly"
                                 ( Action_lang_ast.For    (_2, _4) )
# 182 "action_lang_parse.ml"
               : Action_lang_ast.stmt))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 43 "action_lang_parse.mly"
                                 ( Action_lang_ast.Assert _2       )
# 189 "action_lang_parse.ml"
               : Action_lang_ast.stmt))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 44 "action_lang_parse.mly"
                                  ( Action_lang_ast.Retract _2       )
# 196 "action_lang_parse.ml"
               : Action_lang_ast.stmt))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 45 "action_lang_parse.mly"
                                 ( Action_lang_ast.Print  _2       )
# 203 "action_lang_parse.ml"
               : Action_lang_ast.stmt))
; (fun parser_env ->
    let _2 = (peek_val parser_env 0 : string) in
    Obj.repr(
# 46 "action_lang_parse.mly"
                                   ( Action_lang_ast.PrintLn  _2       )
# 210 "action_lang_parse.ml"
               : Action_lang_ast.stmt))
(* Entry main *)
; (fun parser_env -> raise (YYexit (peek_val parser_env 0)))
|]
let yytables =
  { actions=yyact;
    transl_const=yytransl_const;
    transl_block=yytransl_block;
    lhs=yylhs;
    len=yylen;
    defred=yydefred;
    dgoto=yydgoto;
    sindex=yysindex;
    rindex=yyrindex;
    gindex=yygindex;
    tablesize=yytablesize;
    table=yytable;
    check=yycheck;
    error_function=parse_error;
    names_const=yynames_const;
    names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (yyparse yytables 1 lexfun lexbuf : Action_lang_ast.stmt list)
